// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Uptime.Monitoring.Data;
using Uptime.Monitoring.Model.Models;

namespace Uptime.Monitoring.Data.Migrations
{
    [DbContext(typeof(UptimeMonitoringContext))]
    [Migration("20210426085522_LastExecutor")]
    partial class LastExecutor
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Uptime.Monitoring.Model.Models.AlertContact", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NotificationType")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("AlertContacts");
                });

            modelBuilder.Entity("Uptime.Monitoring.Model.Models.Monitor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuthType")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Interval")
                        .HasColumnType("int");

                    b.Property<Guid>("LastExecutor")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Repeat")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnName("Url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Monitors");

                    b.HasDiscriminator<int>("Type");
                });

            modelBuilder.Entity("Uptime.Monitoring.Model.Models.MonitorAlertContact", b =>
                {
                    b.Property<long>("MonitorId")
                        .HasColumnType("bigint");

                    b.Property<long>("AlertContactId")
                        .HasColumnType("bigint");

                    b.HasKey("MonitorId", "AlertContactId");

                    b.HasIndex("AlertContactId");

                    b.ToTable("MonitorAlertContacts");
                });

            modelBuilder.Entity("Uptime.Monitoring.Model.Models.MonitoringServer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccessKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Host")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("MonitoringServers");
                });

            modelBuilder.Entity("Uptime.Monitoring.Model.Models.UserSettings", b =>
                {
                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("InformDev")
                        .HasColumnType("bit");

                    b.Property<bool>("InformFeatures")
                        .HasColumnType("bit");

                    b.HasKey("UserId");

                    b.ToTable("UserSettings");
                });

            modelBuilder.Entity("Uptime.Monitoring.Model.Models.HttpMonitor", b =>
                {
                    b.HasBaseType("Uptime.Monitoring.Model.Models.Monitor");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("Uptime.Monitoring.Model.Models.KeywordMonitor", b =>
                {
                    b.HasBaseType("Uptime.Monitoring.Model.Models.Monitor");

                    b.Property<bool>("ContainsWord")
                        .HasColumnType("bit");

                    b.Property<string>("Keyword")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("Uptime.Monitoring.Model.Models.PingMonitor", b =>
                {
                    b.HasBaseType("Uptime.Monitoring.Model.Models.Monitor");

                    b.HasDiscriminator().HasValue(3);
                });

            modelBuilder.Entity("Uptime.Monitoring.Model.Models.TcpMonitor", b =>
                {
                    b.HasBaseType("Uptime.Monitoring.Model.Models.Monitor");

                    b.Property<int>("Port")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue(4);
                });

            modelBuilder.Entity("Uptime.Monitoring.Model.Models.MonitorAlertContact", b =>
                {
                    b.HasOne("Uptime.Monitoring.Model.Models.AlertContact", "AlertContact")
                        .WithMany("Monitors")
                        .HasForeignKey("AlertContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Uptime.Monitoring.Model.Models.Monitor", "Monitor")
                        .WithMany("AlertContacts")
                        .HasForeignKey("MonitorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
